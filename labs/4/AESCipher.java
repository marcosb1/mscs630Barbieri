/**
 * file: AESCipher.java
 * author: Marcos Barbieri
 * course: MSCS 630L
 * assignment: lab 4 
 * due date: 04/03/2018
 * version: 0.1
 *
 *
 */

import java.util.Scanner;
import java.util.Arrays;

class AESCipher {

  private static final char[] sbox = {
      0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
      0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
      0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
      0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
      0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
      0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
      0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
      0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
      0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
      0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
      0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
      0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
      0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
      0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
      0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
      0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
  };

  private static final char[] rcon = {
      0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
      0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
      0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
      0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
      0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
      0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
      0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
      0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
      0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
      0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
      0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
      0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
      0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
      0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
      0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
      0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
  };

  static String[][] aesRoundKeys(String KeyHex) {
    // Step 1a. convert our string into a 4x4 matrix
    String[][] keyMatrix = matricize(KeyHex);
    // Step 1b. form a 4x44 matrix where every entry contains hex pairs 
    // Step 2. Take AES key and make it be the first four columns of w
    String[][] w = new String[4][44];
    for (int i=0; i<4; i++) {
      w[0][i] = keyMatrix[0][i];
      w[1][i] = keyMatrix[1][i];
      w[2][i] = keyMatrix[2][i];
      w[3][i] = keyMatrix[3][i];
    }
    // Step 3. Need to fill in the other 40 columns
    int round = 0;
    for (int j=4; j<44; j++) {
      // Step 3a. If col index j is not multiple of 4 do XOR
      if ((j % 4) != 0) {
        w[0][j] = "" + (Long.parseLong(w[0][j-4], 16)^Long.parseLong(w[0][j-1]));
        w[1][j] = "" + (Long.parseLong(w[1][j-4], 16)^Long.parseLong(w[1][j-1]));
        w[2][j] = "" + (Long.parseLong(w[2][j-4], 16)^Long.parseLong(w[2][j-1]));
        w[3][j] = "" + (Long.parseLong(w[3][j-4], 16)^Long.parseLong(w[3][j-1]));
      } else {
        String[] wNew = { w[1][j-1], w[2][j-1], w[3][j-1], w[0][j-1] };
        for (int k=0; k<4; k++) {
          wNew[k] = "" + (Long.parseLong(aesSbox(wNew[k]), 16)^Long.parseLong(Character.toString(rcon[(j/4)]), 16));
        }
        w[0][j] = "" + (Long.parseLong(w[0][j-4], 16)^Long.parseLong(wNew[0]));
        w[1][j] = "" + (Long.parseLong(w[1][j-4], 16)^Long.parseLong(wNew[1]));
        w[2][j] = "" + (Long.parseLong(w[2][j-4], 16)^Long.parseLong(wNew[2]));
        w[3][j] = "" + (Long.parseLong(w[3][j-4], 16)^Long.parseLong(wNew[3]));
      }
    }
    return w;
  }

  /** matricize
   * Will transform a String into a matrix (2 dimensional string array)
   * 
   * parameter:
   *  inStr: String containing 16 hex pairs (32 characters)
   * return:
   *  matrix: 2-dimensional 4x4 String array containing the 
   *            hex pairs corresponding to the input string
   */
  static String[][] matricize(String inStr) {
    if (inStr.length() != 32) {
      System.err.println("Please provide a length 16-hex string.");
      return null;
    }
        

    String[][] matrix = new String[4][4];
    
    int row = 0;
    int col = 0;
    int hexPointer = 0;
    while (hexPointer < inStr.length()) {
      // we are returning a String matrix, so we need to make sure its a String  
      String hexPair = Character.toString(inStr.charAt(hexPointer)) + Character.toString(inStr.charAt(hexPointer + 1));      
      matrix[row][col] = hexPair;
      
      col++;
      if (col > 4) {
        row++;
        col = 0;
      }
  
      hexPointer += 2;
    }    

    return matrix;
  }

  static String aesSbox(String inHex) {
    int sboxValue = (int) sbox[Integer.parseInt(inHex, 16)];
    return Integer.toHexString(sboxValue).toUpperCase();
  }

  static String aesRcon(int round) {
    return null;
  }

  public static void main(String[] args) {
    String[][] matrix = matricize("5468617473206D79204B756E67204675");
    for (int i=0; i<4; i++)
      System.out.println(Arrays.toString(matrix[i])); 
  }

}
